package br.ufjf.iacity.main.gui;

import br.ufjf.iacity.algorithm.AbstractAlgorithmSearch;
import br.ufjf.iacity.algorithm.AbstractAlgorithmSearch.SearchMode;
import br.ufjf.iacity.algorithm.BacktrackingSearch;
import br.ufjf.iacity.algorithm.BreadthAndDepthSearch;
import br.ufjf.iacity.algorithm.OrderedSearch;
import br.ufjf.iacity.algorithm.events.ISearchStartedEventListener;
import br.ufjf.iacity.algorithm.events.ISearchStatusChangedEventListener;
import br.ufjf.iacity.algorithm.events.ISearchStoppedEventListener;
import br.ufjf.iacity.algorithm.transition.AlphabeticalTransition;
import br.ufjf.iacity.graph.CityGraph;
import br.ufjf.iacity.helper.Coordinate;
import br.ufjf.iacity.helper.algorithm.AlgorithmParameter;
import br.ufjf.iacity.model.City;
import java.awt.event.ActionEvent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class IACityGUI extends JFrame implements 
        ISearchStartedEventListener,
        ISearchStoppedEventListener,
        ISearchStatusChangedEventListener
{
    private AlgorithmParameter searchParameter;
    private AbstractAlgorithmSearch algorithmSearch;
    private long startSearchTime;
    private long endSearchTime;
    
    /**
     * Creates new form IACityGUI
     */
    public IACityGUI() 
    {
        this.searchParameter = new AlgorithmParameter();
        
        initComponents();
        initEvents();
        configComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioGroupCreateGraph = new javax.swing.ButtonGroup();
        radioGroupSearchAlgorithm = new javax.swing.ButtonGroup();
        radioGroupSearchTransition = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        radioManualGraph = new javax.swing.JRadioButton();
        radioTxtFileGraph = new javax.swing.JRadioButton();
        radioMapsGraph = new javax.swing.JRadioButton();
        btnCreateGraph = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        radioBTSearch = new javax.swing.JRadioButton();
        radioBreadthSearch = new javax.swing.JRadioButton();
        radioDepthSearch = new javax.swing.JRadioButton();
        radioOrderedSearch = new javax.swing.JRadioButton();
        radioBestFirstSearch = new javax.swing.JRadioButton();
        radioASearch = new javax.swing.JRadioButton();
        radioIDASearch = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        checkBoxEnableDuplicated = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        radioAlphabeticalTransition = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        btnStartSearch = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        labelStatusSearchInfo = new javax.swing.JLabel();
        labelAlgorithmSearchInfo = new javax.swing.JLabel();
        labelSearchExecutionTimeInfo = new javax.swing.JLabel();
        labelSearchCostInfo = new javax.swing.JLabel();
        labelSearchDepthInfo = new javax.swing.JLabel();
        labelExpandedNodeCountInfo = new javax.swing.JLabel();
        labelVisitedNodeCountInfo = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSearchPathInfo = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IACity");
        setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Defina as configurações desejadas para a execução dos algoritmos de IA");

        jTabbedPane2.setFont(jTabbedPane2.getFont().deriveFont(jTabbedPane2.getFont().getSize()+1f));

        jPanel1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getSize()+3f));
        jLabel3.setText("Escolha a forma de obter os dados para construção do grafo de cidades");

        radioGroupCreateGraph.add(radioManualGraph);
        radioManualGraph.setFont(radioManualGraph.getFont().deriveFont(radioManualGraph.getFont().getSize()+1f));
        radioManualGraph.setText("Inserir manualmente os dados");

        radioGroupCreateGraph.add(radioTxtFileGraph);
        radioTxtFileGraph.setFont(radioTxtFileGraph.getFont().deriveFont(radioTxtFileGraph.getFont().getSize()+1f));
        radioTxtFileGraph.setText("Obter os dados de arquivo texto");

        radioGroupCreateGraph.add(radioMapsGraph);
        radioMapsGraph.setFont(radioMapsGraph.getFont().deriveFont(radioMapsGraph.getFont().getSize()+1f));
        radioMapsGraph.setText("Obter os dados usando o Google Maps");

        btnCreateGraph.setFont(btnCreateGraph.getFont().deriveFont(btnCreateGraph.getFont().getSize()+3f));
        btnCreateGraph.setText("Criar Grafo");
        btnCreateGraph.setPreferredSize(new java.awt.Dimension(73, 25));
        btnCreateGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateGraphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioTxtFileGraph)
                            .addComponent(radioManualGraph)
                            .addComponent(jLabel3)
                            .addComponent(radioMapsGraph)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(290, 290, 290)
                        .addComponent(btnCreateGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(186, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(radioManualGraph)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioTxtFileGraph)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioMapsGraph)
                .addGap(44, 44, 44)
                .addComponent(btnCreateGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Grafo de Cidades", jPanel1);

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        jPanel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Escolha o algoritmo de busca que será utilizado");

        radioGroupSearchAlgorithm.add(radioBTSearch);
        radioBTSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radioBTSearch.setText("Backtracking");

        radioGroupSearchAlgorithm.add(radioBreadthSearch);
        radioBreadthSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radioBreadthSearch.setText("Breadth");

        radioGroupSearchAlgorithm.add(radioDepthSearch);
        radioDepthSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radioDepthSearch.setText("Depth");

        radioGroupSearchAlgorithm.add(radioOrderedSearch);
        radioOrderedSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radioOrderedSearch.setText("Ordered");

        radioGroupSearchAlgorithm.add(radioBestFirstSearch);
        radioBestFirstSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radioBestFirstSearch.setText("BestFirst");

        radioGroupSearchAlgorithm.add(radioASearch);
        radioASearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radioASearch.setText("A*");

        radioGroupSearchAlgorithm.add(radioIDASearch);
        radioIDASearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radioIDASearch.setText("IDA*");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioDepthSearch)
                    .addComponent(jLabel2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioBTSearch)
                            .addComponent(radioBreadthSearch))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioASearch)
                            .addComponent(radioBestFirstSearch)
                            .addComponent(radioIDASearch)))
                    .addComponent(radioOrderedSearch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioBTSearch)
                    .addComponent(radioBestFirstSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioBreadthSearch)
                    .addComponent(radioASearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioDepthSearch)
                    .addComponent(radioIDASearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radioOrderedSearch)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Marque as opções que serão usadas durante a busca");

        checkBoxEnableDuplicated.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        checkBoxEnableDuplicated.setText("Habilitar a possiblidade de adicionar estados duplicados na árvore de busca");
        checkBoxEnableDuplicated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxEnableDuplicatedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxEnableDuplicated)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(checkBoxEnableDuplicated)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Escolher a regra de transição que será aplicada durante a busca");

        radioGroupSearchTransition.add(radioAlphabeticalTransition);
        radioAlphabeticalTransition.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radioAlphabeticalTransition.setText("Ordem alfabética dos nomes das cidades");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioAlphabeticalTransition)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(radioAlphabeticalTransition)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Algoritmos de IA", jPanel2);

        btnStartSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnStartSearch.setText("Buscar");
        btnStartSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartSearchActionPerformed(evt);
            }
        });

        jPanel8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        labelStatusSearchInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelStatusSearchInfo.setText("Status:  Parado");

        labelAlgorithmSearchInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelAlgorithmSearchInfo.setText("Algoritmo de IA: Nenhum selecionado");

        labelSearchExecutionTimeInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelSearchExecutionTimeInfo.setText("Tempo de Execução: 0 ms");

        labelSearchCostInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelSearchCostInfo.setText("Custo da Solução: 0");

        labelSearchDepthInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelSearchDepthInfo.setText("Profundidade da Solução: 0");
        labelSearchDepthInfo.setToolTipText("");

        labelExpandedNodeCountInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelExpandedNodeCountInfo.setText("Quantidade de Nós Expandidos: 0");

        labelVisitedNodeCountInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelVisitedNodeCountInfo.setText("Quantidade de Nós Visitados: 0");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Caminho:");

        txtSearchPathInfo.setEditable(false);
        txtSearchPathInfo.setColumns(20);
        txtSearchPathInfo.setLineWrap(true);
        txtSearchPathInfo.setRows(5);
        jScrollPane1.setViewportView(txtSearchPathInfo);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(labelVisitedNodeCountInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelExpandedNodeCountInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelSearchDepthInfo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelAlgorithmSearchInfo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(labelStatusSearchInfo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelSearchExecutionTimeInfo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelSearchCostInfo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAlgorithmSearchInfo)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(labelStatusSearchInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelSearchExecutionTimeInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelSearchCostInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelSearchDepthInfo)
                        .addGap(14, 14, 14)
                        .addComponent(labelExpandedNodeCountInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelVisitedNodeCountInfo))
                    .addComponent(jScrollPane1))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Status da Busca");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(311, 311, 311)
                        .addComponent(btnStartSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnStartSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        jTabbedPane2.addTab("Buscar", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // <editor-fold defaultstate="collapsed" desc="Initialize Events">
    private void initEvents()
    {
        radioBTSearch.addActionListener(this::radioGroupSearchAlgorithmActionPerformed);
        radioBreadthSearch.addActionListener(this::radioGroupSearchAlgorithmActionPerformed);
        radioDepthSearch.addActionListener(this::radioGroupSearchAlgorithmActionPerformed);
        radioOrderedSearch.addActionListener(this::radioGroupSearchAlgorithmActionPerformed);
        radioBestFirstSearch.addActionListener(this::radioGroupSearchAlgorithmActionPerformed);
        radioASearch.addActionListener(this::radioGroupSearchAlgorithmActionPerformed);
        radioIDASearch.addActionListener(this::radioGroupSearchAlgorithmActionPerformed);
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Configure Components">
    private void configComponents()
    {
        
    }
    // </editor-fold>
    
    private void btnCreateGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateGraphActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCreateGraphActionPerformed

    private void btnStartSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartSearchActionPerformed
        if (searchParameter.getSearchMode() == null)
        {
            JOptionPane.showMessageDialog(this, "Algoritmo de busca não selecionado");
        }
        else
        {
            algorithmSearch = null;
            
            CityGraph graph = createGraph();
            
            searchParameter.setGraph(graph);
            searchParameter.setTransition(new AlphabeticalTransition());
            searchParameter.setStartCityNode(graph.getNode(0));
            searchParameter.setEndCityNode(graph.getNode(5));
            
            switch (searchParameter.getSearchMode().toString().toUpperCase())
            {
                case "BACKTRACKING":
                    algorithmSearch = new BacktrackingSearch(searchParameter);
                    break;
                case "BREADTH":
                case "DEPTH":
                    algorithmSearch = new BreadthAndDepthSearch(searchParameter);
                    break;
                case "ORDERED":
                    algorithmSearch = new OrderedSearch(searchParameter);
                    break;
                case "BESTFIRST":
                    
                    break;
                case "A*":
                    
                    break;
                case "IDA":
                    
                    break;
            }
            
            if(algorithmSearch != null)
            {
                // Adicionando eventos para do algoritmo de busca
                algorithmSearch.addSearchStartedEventListener(this);
                algorithmSearch.addSearchStoppedEventListener(this);
                algorithmSearch.addSearchStatusChangedEventListener(this);
                
                algorithmSearch.search();
            }
        }
    }//GEN-LAST:event_btnStartSearchActionPerformed

    private void checkBoxEnableDuplicatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxEnableDuplicatedActionPerformed
        searchParameter.setEnableDuplicated(!searchParameter.isEnableDuplicated());
    }//GEN-LAST:event_checkBoxEnableDuplicatedActionPerformed

    private void radioGroupSearchAlgorithmActionPerformed(ActionEvent evt)
    {
        switch(evt.getActionCommand().toUpperCase())
        {
            case "BACKTRACKING":
                searchParameter.setSearchMode(SearchMode.Backtracking);
                break;
            case "BREADTH":
                searchParameter.setSearchMode(SearchMode.Breadth);
                break;
            case "DEPTH":
                searchParameter.setSearchMode(SearchMode.Depth);
                break;
            case "ORDERED":
                searchParameter.setSearchMode(SearchMode.Ordered);
                break;
            case "BESTFIRST":
                searchParameter.setSearchMode(SearchMode.BestFirst);
                break;
            case "A*":
                searchParameter.setSearchMode(SearchMode.A);
                break;
            case "IDA*":
                searchParameter.setSearchMode(SearchMode.IDA);
                break;
        }
        
        this.labelAlgorithmSearchInfo.setText(String.format("Algoritmo de IA: %s", searchParameter.getSearchMode().toString()));
    }
    
    @Override
    public void searchStartedEvent(Object event) 
    {
        this.labelSearchExecutionTimeInfo.setText(String.format("Tempo de Execução: %s ms", 0));
        this.labelSearchCostInfo.setText(String.format("Custo da Solução: %s", 0));
        this.labelSearchDepthInfo.setText(String.format("Profundidade da Solução: %s", 0));
        this.labelExpandedNodeCountInfo.setText(String.format("Quantidade de Nós Expandidos: %s", 0));
        this.labelVisitedNodeCountInfo.setText(String.format("Quantidade de Nós Visitados: %s", 0));
        this.txtSearchPathInfo.setText("");
        
        startSearchTime = System.nanoTime();
    }
    
    @Override
    public void searchStoppedEvent(Object event) 
    {
        endSearchTime = System.nanoTime();
        
        double executionTime = ((endSearchTime - startSearchTime) / 1e6);
        
        System.out.println("Tempo de Execução: " + executionTime + " ms");
        algorithmSearch.printCost();
        algorithmSearch.printDepth();
        algorithmSearch.printExpandedAndVisited();
        System.out.println("Caminho:");
        algorithmSearch.printPath();
        
        this.labelSearchExecutionTimeInfo.setText(String.format("Tempo de Execução: %s ms", executionTime));
        this.labelSearchCostInfo.setText(String.format("Custo da Solução: %s", algorithmSearch.getSolutionCost()));
        this.labelSearchDepthInfo.setText(String.format("Profundidade da Solução: %s", algorithmSearch.getSolutionDepth()));
        this.labelExpandedNodeCountInfo.setText(String.format("Quantidade de Nós Expandidos: %s", algorithmSearch.getSolutionExpandedNodeCount()));
        this.labelVisitedNodeCountInfo.setText(String.format("Quantidade de Nós Visitados: %s", algorithmSearch.getSolutionVisitedNodeCount()));
        this.txtSearchPathInfo.setText(algorithmSearch.getSolutionPath());
    }
    
    @Override
    public void searchStatusChangedEvent(Object event) 
    {
        this.labelStatusSearchInfo.setText(String.format("Status: %s", algorithmSearch.getSearchState().toString()));
    }
    
    
    private CityGraph createGraph()
    {
        City cityA = new City("A", new Coordinate(-1, -1));
        City cityB = new City("B", new Coordinate(-1, -1));
        City cityC = new City("C", new Coordinate(-1, -1));
        City cityD = new City("D", new Coordinate(-1, -1));
        City cityE = new City("E", new Coordinate(-1, -1));
        City cityF = new City("F", new Coordinate(-1, -1));

        CityGraph graph = new CityGraph();
        graph.addNode(0, cityA);
        graph.addNode(0, cityB);
        graph.addNode(0, cityC);
        graph.addNode(0, cityD);
        graph.addNode(0, cityE);
        graph.addNode(0, cityF);

        graph.addAdjacency(graph.getNode(cityA), graph.getNode(cityB), 20, false);
        graph.addAdjacency(graph.getNode(cityA), graph.getNode(cityC), 10, false);
        graph.addAdjacency(graph.getNode(cityA), graph.getNode(cityD), 5, false);

        graph.addAdjacency(graph.getNode(cityB), graph.getNode(cityC), 25, false);
        graph.addAdjacency(graph.getNode(cityB), graph.getNode(cityD), 15, false);

        graph.addAdjacency(graph.getNode(cityC), graph.getNode(cityD), 30, false);
        graph.addAdjacency(graph.getNode(cityC), graph.getNode(cityE), 15, false);

        graph.addAdjacency(graph.getNode(cityD), graph.getNode(cityE), 10, false);

        graph.addAdjacency(graph.getNode(cityE), graph.getNode(cityF), 5, false);
        
        return graph;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } 
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IACityGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IACityGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateGraph;
    private javax.swing.JButton btnStartSearch;
    private javax.swing.JCheckBox checkBoxEnableDuplicated;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel labelAlgorithmSearchInfo;
    private javax.swing.JLabel labelExpandedNodeCountInfo;
    private javax.swing.JLabel labelSearchCostInfo;
    private javax.swing.JLabel labelSearchDepthInfo;
    private javax.swing.JLabel labelSearchExecutionTimeInfo;
    private javax.swing.JLabel labelStatusSearchInfo;
    private javax.swing.JLabel labelVisitedNodeCountInfo;
    private javax.swing.JRadioButton radioASearch;
    private javax.swing.JRadioButton radioAlphabeticalTransition;
    private javax.swing.JRadioButton radioBTSearch;
    private javax.swing.JRadioButton radioBestFirstSearch;
    private javax.swing.JRadioButton radioBreadthSearch;
    private javax.swing.JRadioButton radioDepthSearch;
    private javax.swing.ButtonGroup radioGroupCreateGraph;
    private javax.swing.ButtonGroup radioGroupSearchAlgorithm;
    private javax.swing.ButtonGroup radioGroupSearchTransition;
    private javax.swing.JRadioButton radioIDASearch;
    private javax.swing.JRadioButton radioManualGraph;
    private javax.swing.JRadioButton radioMapsGraph;
    private javax.swing.JRadioButton radioOrderedSearch;
    private javax.swing.JRadioButton radioTxtFileGraph;
    private javax.swing.JTextArea txtSearchPathInfo;
    // End of variables declaration//GEN-END:variables

}
